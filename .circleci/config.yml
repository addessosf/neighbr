version: 2.1
jobs:
  build:
    working_directory: ~/neighbr
    docker:
      - image: cimg/node:14.19.0
    steps:
      - checkout
      - restore_cache:
          key: npm-cache-v1.1-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --include=dev
          # npm ci is the npm install for container environments
      - save_cache:
          key: npm-cache-v1.1-{{ checksum "package-lock.json" }}
          paths:
            - /home/circleci/.npm
      - run:
          name: Run Tests
          command: npm run test:ci
      - store_test_results:
          path: .
      - store_artifacts:
          path: coverage

  deploy:
    working_directory: ~/neighbr
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout
      - restore_cache:
          key: npm-cache-v1.1-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm install
          # npm ci is the npm install for container environments
      - save_cache:
          key: npm-cache-v1.1-{{ checksum "package-lock.json" }}
          paths:
            - /home/circleci/.npm
      - add_ssh_keys:
          fingerprints:
            - "30:2c:ba:e2:ad:f3:c3:bb:77:6b:70:b5:29:84:b1:7c"
      - run:
          name: Create Docker Context
          command: |
            touch .env
            docker context create deployserver --docker "host=ssh://ec2-user@${DEPLOY_IP}"
      - run:
          name: Stop current docker container and clean up
          command: |
            docker context use deployserver
            docker-compose down
            docker system prune -f
            docker volume prune -f
            docker image rm `docker images | grep nginx | sed 's/\ \ */ /g' | cut -f3 -d\ `
      - run:
          name: Deploy With Docker-Compose
          command: COMPOSE_DOCKER_CLI_BUILD=0 docker-compose up -d
workflows:
  version: 2

  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master